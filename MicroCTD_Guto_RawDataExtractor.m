%
%
% Script to process the Micro-CTD P-files and export the structure to be
% used with Python.
%
% This script process only all P-files in the working directory, and generated 1 output for each
% profile in the file, saving the structrure (mfild) in the same directory. 
%
% Guto, 17-Dez-2024


clear all
close all
clc

% This is the qlinfo_patos which Debora used in his first paper... after
% assessing and comparing with the default qlinfo, below are some guessing
% values for processing. Not sure exactly the impact on the data.
load('qlinfo_patos.mat');
qlinfo_patos.make_figures = logical(0); 
qlinfo_patos.fft_length = .6
qlinfo_patos.diss_length = 1.4
qlinfo_patos.overlap = .8
qlinfo_patos.profile_min_P = 1
qlinfo_patos.profile_min_duration = 5


% file management
working_directory = 'D:\GUTO\1_Trabs\MicroCTD_Rockland\';
%working_directory = 'd:\GUTO\1_Trabs\1_Aestus\Lagoa_dos_Patos\Campo_Debora_20220504\MicroCTD\';

P_files = dir(fullfile(working_directory, '*.P'));
n_files = length(P_files);


for f = 1:n_files

    file_info = P_files(f);
    filename = file_info.name;
    
    % to automatically delete de .mat generated by the quick_look during the execution
    [~, name, ~] = fileparts(strcat(working_directory, filename));
    filename_mat = strcat(name, '.mat');
    
    filename = strcat(working_directory, P_files(f).name);

    % to automatically delete de .mat generated by the quick_look during the execution
    [file_path, name, ~] = fileparts(strcat(working_directory, filename));
    filename_mat = strcat(working_directory, name, '.mat');
    delete(filename_mat);
    
    % to find the numeber of profiles in the file
    info_p = quick_look_Guto(filename ,[] ,[] , qlinfo_patos);
    
    if isempty(info_p)
        continue
    end
    
    num_p = info_p.profiles_in_this_file;
    delete(filename_mat);

    for i = 1:num_p
        
        disp(['   ']);
        disp(['#################################################']);
        disp(['#### PROCESSING PROFILE ', num2str(i)]);
        disp(['#################################################']);

        info = quick_look(filename ,[] ,[] , qlinfo_patos, 'profile_num', i)

        delete(filename_mat);

       % output structure
        date_time = info.file_start_datetime;
        date_time_n = datenum(date_time, 'yyyy-mm-dd HH:MM:SS');

        % found it studying the structurin in Jupyter...
        time_seconds_from_start = info.Data_slow(29,1);

        % add the 'seconds' of the profile start to the file time start
        date_time_n_profile = date_time_n + time_seconds_from_start/(24*3600);
        % create a datetime string to compose the file name
        date_time_profile = datestr(date_time_n_profile, 'yyyymmdd_HHMMSS');

        junta.file_datetime = date_time;    
        junta.dissipation = info.e;
        junta.Data_slow = info.Data_slow;
        junta.Data_fast = info.Data_fast;
        junta.slow_list = info.slow_list;
        junta.fast_list = info.fast_list;

        % build the 'file name'
        filename_save = strcat(name, '_profile_', sprintf('%03d', i), '_', date_time_profile,'.mat');

        disp(['   ']);
        disp(['#################################################']);
        disp(['#### Salvando arquivo ', filename_save]);
        disp(['#################################################']);
        save([working_directory, filename_save], 'junta');

    end
end